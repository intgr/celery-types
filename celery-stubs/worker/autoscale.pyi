from _typeshed import Incomplete
from celery.bootsteps import StartStopStep
from celery.concurrency.base import BasePool
from celery.utils.threads import bgThread

class WorkerComponent(StartStopStep):
    enabled: Incomplete
    def __init__(self, w: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, w: Incomplete) -> Incomplete: ...
    def register_with_event_loop(self, w: Incomplete, hub: Incomplete) -> None: ...
    def info(self, w: Incomplete) -> Incomplete: ...

class Autoscaler(bgThread):
    pool: BasePool
    mutex: Incomplete
    max_concurrency: int
    min_concurrency: int
    keepalive: int | float
    worker: Incomplete
    def __init__(
        self,
        pool: BasePool,
        max_concurrency: int,
        min_concurrency: int = ...,
        worker: Incomplete | None = ...,
        keepalive: int | float = ...,
        mutex: Incomplete | None = ...,
    ) -> None: ...
    def body(self) -> None: ...
    def maybe_scale(self, req: Incomplete | None = ...) -> None: ...
    def update(self, max: Incomplete | None = ..., min: Incomplete | None = ...) -> Incomplete: ...
    def scale_up(self, n: Incomplete) -> Incomplete: ...
    def scale_down(self, n: Incomplete) -> Incomplete: ...
    def info(self) -> Incomplete: ...
    @property
    def qty(self) -> Incomplete: ...
    @property
    def processes(self) -> Incomplete: ...
