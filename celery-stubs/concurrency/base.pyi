from _typeshed import Incomplete

def apply_target(
    target,
    args=...,
    kwargs: Incomplete | None = ...,
    callback: Incomplete | None = ...,
    accept_callback: Incomplete | None = ...,
    pid: Incomplete | None = ...,
    getpid=...,
    propagate=...,
    monotonic=...,
    **_
) -> None: ...

class BasePool:
    RUN: int
    CLOSE: int
    TERMINATE: int
    Timer: Incomplete
    signal_safe: bool
    is_green: bool
    uses_semaphore: bool
    task_join_will_block: bool
    body_can_be_buffer: bool
    limit: Incomplete
    putlocks: Incomplete
    options: Incomplete
    forking_enable: Incomplete
    callbacks_propagate: Incomplete
    app: Incomplete
    def __init__(
        self,
        limit: Incomplete | None = ...,
        putlocks: bool = ...,
        forking_enable: bool = ...,
        callbacks_propagate=...,
        app: Incomplete | None = ...,
        **options
    ) -> None: ...
    def on_start(self) -> None: ...
    def did_start_ok(self): ...
    def flush(self) -> None: ...
    def on_stop(self) -> None: ...
    def register_with_event_loop(self, loop) -> None: ...
    def on_apply(self, *args, **kwargs) -> None: ...
    def on_terminate(self) -> None: ...
    def on_soft_timeout(self, job) -> None: ...
    def on_hard_timeout(self, job) -> None: ...
    def maintain_pool(self, *args, **kwargs) -> None: ...
    def terminate_job(self, pid, signal: Incomplete | None = ...) -> None: ...
    def restart(self) -> None: ...
    def stop(self) -> None: ...
    def terminate(self) -> None: ...
    def start(self) -> None: ...
    def close(self) -> None: ...
    def on_close(self) -> None: ...
    def apply_async(
        self,
        target,
        args: Incomplete | None = ...,
        kwargs: Incomplete | None = ...,
        **options
    ): ...
    @property
    def info(self): ...
    @property
    def active(self): ...
    @property
    def num_processes(self): ...
